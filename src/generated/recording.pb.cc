// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: recording.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "recording.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class RecordingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Recording> {
} _Recording_default_instance_;

namespace protobuf_recording_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recording, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recording, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recording, end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recording, devices_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recording, timeline_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Recording)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Recording_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "recording.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _Recording_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaults();
  ::protobuf_ovr_5fdevice_2eproto::InitDefaults();
  _Recording_default_instance_.DefaultConstruct();
  _Recording_default_instance_.get_mutable()->start_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _Recording_default_instance_.get_mutable()->end_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\017recording.proto\032\037google/protobuf/times"
      "tamp.proto\032\020ovr_device.proto\"\234\001\n\tRecordi"
      "ng\022)\n\005start\030\001 \001(\0132\032.google.protobuf.Time"
      "stamp\022\'\n\003end\030\002 \001(\0132\032.google.protobuf.Tim"
      "estamp\022\033\n\007devices\030\003 \003(\0132\n.OVRDevice\022\036\n\010t"
      "imeline\030\004 \003(\0132\014.OVRTimelineb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 235);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "recording.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::protobuf_ovr_5fdevice_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_recording_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Recording::kStartFieldNumber;
const int Recording::kEndFieldNumber;
const int Recording::kDevicesFieldNumber;
const int Recording::kTimelineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Recording::Recording()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_recording_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Recording)
}
Recording::Recording(const Recording& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      devices_(from.devices_),
      timeline_(from.timeline_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_start()) {
    start_ = new ::google::protobuf::Timestamp(*from.start_);
  } else {
    start_ = NULL;
  }
  if (from.has_end()) {
    end_ = new ::google::protobuf::Timestamp(*from.end_);
  } else {
    end_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Recording)
}

void Recording::SharedCtor() {
  ::memset(&start_, 0, reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_) + sizeof(end_));
  _cached_size_ = 0;
}

Recording::~Recording() {
  // @@protoc_insertion_point(destructor:Recording)
  SharedDtor();
}

void Recording::SharedDtor() {
  if (this != internal_default_instance()) {
    delete start_;
  }
  if (this != internal_default_instance()) {
    delete end_;
  }
}

void Recording::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Recording::descriptor() {
  protobuf_recording_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recording_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Recording& Recording::default_instance() {
  protobuf_recording_2eproto::InitDefaults();
  return *internal_default_instance();
}

Recording* Recording::New(::google::protobuf::Arena* arena) const {
  Recording* n = new Recording;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Recording::Clear() {
// @@protoc_insertion_point(message_clear_start:Recording)
  devices_.Clear();
  timeline_.Clear();
  if (GetArenaNoVirtual() == NULL && start_ != NULL) {
    delete start_;
  }
  start_ = NULL;
  if (GetArenaNoVirtual() == NULL && end_ != NULL) {
    delete end_;
  }
  end_ = NULL;
}

bool Recording::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Recording)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Timestamp start = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp end = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .OVRDevice devices = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_devices()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .OVRTimeline timeline = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_timeline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Recording)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Recording)
  return false;
#undef DO_
}

void Recording::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Recording)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start = 1;
  if (this->has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->start_, output);
  }

  // .google.protobuf.Timestamp end = 2;
  if (this->has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->end_, output);
  }

  // repeated .OVRDevice devices = 3;
  for (unsigned int i = 0, n = this->devices_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->devices(i), output);
  }

  // repeated .OVRTimeline timeline = 4;
  for (unsigned int i = 0, n = this->timeline_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->timeline(i), output);
  }

  // @@protoc_insertion_point(serialize_end:Recording)
}

::google::protobuf::uint8* Recording::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Recording)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start = 1;
  if (this->has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->start_, deterministic, target);
  }

  // .google.protobuf.Timestamp end = 2;
  if (this->has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->end_, deterministic, target);
  }

  // repeated .OVRDevice devices = 3;
  for (unsigned int i = 0, n = this->devices_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->devices(i), deterministic, target);
  }

  // repeated .OVRTimeline timeline = 4;
  for (unsigned int i = 0, n = this->timeline_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->timeline(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Recording)
  return target;
}

size_t Recording::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Recording)
  size_t total_size = 0;

  // repeated .OVRDevice devices = 3;
  {
    unsigned int count = this->devices_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->devices(i));
    }
  }

  // repeated .OVRTimeline timeline = 4;
  {
    unsigned int count = this->timeline_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timeline(i));
    }
  }

  // .google.protobuf.Timestamp start = 1;
  if (this->has_start()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->start_);
  }

  // .google.protobuf.Timestamp end = 2;
  if (this->has_end()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->end_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Recording::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Recording)
  GOOGLE_DCHECK_NE(&from, this);
  const Recording* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Recording>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Recording)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Recording)
    MergeFrom(*source);
  }
}

void Recording::MergeFrom(const Recording& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Recording)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  devices_.MergeFrom(from.devices_);
  timeline_.MergeFrom(from.timeline_);
  if (from.has_start()) {
    mutable_start()->::google::protobuf::Timestamp::MergeFrom(from.start());
  }
  if (from.has_end()) {
    mutable_end()->::google::protobuf::Timestamp::MergeFrom(from.end());
  }
}

void Recording::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Recording)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Recording::CopyFrom(const Recording& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Recording)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Recording::IsInitialized() const {
  return true;
}

void Recording::Swap(Recording* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Recording::InternalSwap(Recording* other) {
  devices_.InternalSwap(&other->devices_);
  timeline_.InternalSwap(&other->timeline_);
  std::swap(start_, other->start_);
  std::swap(end_, other->end_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Recording::GetMetadata() const {
  protobuf_recording_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recording_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Recording

// .google.protobuf.Timestamp start = 1;
bool Recording::has_start() const {
  return this != internal_default_instance() && start_ != NULL;
}
void Recording::clear_start() {
  if (GetArenaNoVirtual() == NULL && start_ != NULL) delete start_;
  start_ = NULL;
}
const ::google::protobuf::Timestamp& Recording::start() const {
  // @@protoc_insertion_point(field_get:Recording.start)
  return start_ != NULL ? *start_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* Recording::mutable_start() {
  
  if (start_ == NULL) {
    start_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:Recording.start)
  return start_;
}
::google::protobuf::Timestamp* Recording::release_start() {
  // @@protoc_insertion_point(field_release:Recording.start)
  
  ::google::protobuf::Timestamp* temp = start_;
  start_ = NULL;
  return temp;
}
void Recording::set_allocated_start(::google::protobuf::Timestamp* start) {
  delete start_;
  if (start != NULL && start->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_start = new ::google::protobuf::Timestamp;
    new_start->CopyFrom(*start);
    start = new_start;
  }
  start_ = start;
  if (start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Recording.start)
}

// .google.protobuf.Timestamp end = 2;
bool Recording::has_end() const {
  return this != internal_default_instance() && end_ != NULL;
}
void Recording::clear_end() {
  if (GetArenaNoVirtual() == NULL && end_ != NULL) delete end_;
  end_ = NULL;
}
const ::google::protobuf::Timestamp& Recording::end() const {
  // @@protoc_insertion_point(field_get:Recording.end)
  return end_ != NULL ? *end_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* Recording::mutable_end() {
  
  if (end_ == NULL) {
    end_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:Recording.end)
  return end_;
}
::google::protobuf::Timestamp* Recording::release_end() {
  // @@protoc_insertion_point(field_release:Recording.end)
  
  ::google::protobuf::Timestamp* temp = end_;
  end_ = NULL;
  return temp;
}
void Recording::set_allocated_end(::google::protobuf::Timestamp* end) {
  delete end_;
  if (end != NULL && end->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_end = new ::google::protobuf::Timestamp;
    new_end->CopyFrom(*end);
    end = new_end;
  }
  end_ = end;
  if (end) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Recording.end)
}

// repeated .OVRDevice devices = 3;
int Recording::devices_size() const {
  return devices_.size();
}
void Recording::clear_devices() {
  devices_.Clear();
}
const ::OVRDevice& Recording::devices(int index) const {
  // @@protoc_insertion_point(field_get:Recording.devices)
  return devices_.Get(index);
}
::OVRDevice* Recording::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:Recording.devices)
  return devices_.Mutable(index);
}
::OVRDevice* Recording::add_devices() {
  // @@protoc_insertion_point(field_add:Recording.devices)
  return devices_.Add();
}
::google::protobuf::RepeatedPtrField< ::OVRDevice >*
Recording::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:Recording.devices)
  return &devices_;
}
const ::google::protobuf::RepeatedPtrField< ::OVRDevice >&
Recording::devices() const {
  // @@protoc_insertion_point(field_list:Recording.devices)
  return devices_;
}

// repeated .OVRTimeline timeline = 4;
int Recording::timeline_size() const {
  return timeline_.size();
}
void Recording::clear_timeline() {
  timeline_.Clear();
}
const ::OVRTimeline& Recording::timeline(int index) const {
  // @@protoc_insertion_point(field_get:Recording.timeline)
  return timeline_.Get(index);
}
::OVRTimeline* Recording::mutable_timeline(int index) {
  // @@protoc_insertion_point(field_mutable:Recording.timeline)
  return timeline_.Mutable(index);
}
::OVRTimeline* Recording::add_timeline() {
  // @@protoc_insertion_point(field_add:Recording.timeline)
  return timeline_.Add();
}
::google::protobuf::RepeatedPtrField< ::OVRTimeline >*
Recording::mutable_timeline() {
  // @@protoc_insertion_point(field_mutable_list:Recording.timeline)
  return &timeline_;
}
const ::google::protobuf::RepeatedPtrField< ::OVRTimeline >&
Recording::timeline() const {
  // @@protoc_insertion_point(field_list:Recording.timeline)
  return timeline_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
